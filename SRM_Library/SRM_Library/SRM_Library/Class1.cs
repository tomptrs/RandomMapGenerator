using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SRM_Library
{
    public class SmallRandomMap
    {
        //SRM is made for maps x:50 y:30
        //witch results in a total width of 1500 by 900 pixels
        //a single generated element is standard 30 x 30 pixels
        //changes might need to be done in level.cs, level1.cs and manager to use this code correcty;

        int x = 0;           
        int y = 0;
        int platform_offset;
        int platform_length;
        int gap_length;                         
        Boolean platform_limiter = false;       //keeps te generator from drawing outside te Array
        public int[,] mapArray;
        Random rnd = new Random();

        public void clearmap()
        {
            mapArray = new int[30, 50]{
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},

                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},

                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},

                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},

                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},

                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,     0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,    0, 0, 0, 0, 0 ,0, 0, 0, 0, 0,}
            };
        }               //defines dimesions and clears map

        public void create_map()                //creates random map
        {
            clearmap();
            draw_sea();
            draw_platforms();

        }

        public void draw_sea()                  //creates a sea on the bottom of te map
        {
            x = 0;
            y = 27;
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 50; j++)
                {
                    mapArray[y, x] = 2;         //sets selected block to value '2' (water)
                    x++;
                }
                x = 0;
                y++;
            }
            y = 0;
        }

        public void draw_platforms()            //create platforms
        {
            y = 23;                                         //default platform spawn
            x = 0;                                          //default row startpoint

            for (int i = 0; i < 4; i++)                     // 4 rows of platforms
            {
                while (x < 50)
                {
                    platform_offset = rnd.Next(0, 3);       // random 0-2
                    platform_length = rnd.Next(3, 9);       // random 3-8
                    gap_length = rnd.Next(2, 5);            // random 2-4
                    for (int j = 0; j < platform_length; j++)
                    {
                        if (x == 50)
                        {
                            platform_limiter = true;
                        }

                        if (platform_limiter == false)
                        {
                            mapArray[y + platform_offset, x] = 1; //sets selected block to value '1' (dirt)
                            x++;
                        }

                    }
                    for (int j = 0; j < gap_length; j++)
                    {
                        if (x == 50)
                        {
                            platform_limiter = true;
                        }

                        if (platform_limiter == false)
                        {
                            mapArray[y, x] = 0;
                            x++;
                        }

                    }
                }
                platform_limiter = false;
                x = 0;
                y = y - 6;              // rows are default 6 blocks apart
            }
            y = 0;
        }
    }
}
